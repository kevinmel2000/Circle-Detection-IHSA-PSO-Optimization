/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Boundary;

import Controller.Controller;

import Entity.Parameter;
import Entity.Parameter_PSO;

import java.awt.Image;

import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author eek
 */
public class CircleDetectGui extends javax.swing.JFrame {
    
String[] hmbaru, hmlama,Plama,Pbaru;
BufferedImage originalImage = null;
BufferedImage afterImage = null;
BufferedImage FinalEdge= null;
BufferedImage MultipleCircle= null;
BufferedImage Solid=null;
BufferedImage Solid2= null;
BufferedImage Circle= null;

BufferedImage multipleCircleFunction=null;
BufferedImage oldEdge=null;

File imageFile = null;

String  Algo;
String old="";

public static BufferedImage tempEdge = null;
public static BufferedImage tempOriginal = null;
 BufferedImage tempFunction =null;
private int bestx0,besty0,bestrad;
int width,height;

float timeSingle;
float timeMultiple;
int hms,pop;
boolean flag;

int population;
    /**
     * Creates new form GUI
     */
    public CircleDetectGui() {
        initComponents();
        bwstatic.setEnabled(false);
        parstatic.setEnabled(false);
        functionCheck.setEnabled(false);
        combokernel.setEnabled(false);
        SingleDetectButton.setEnabled(false);
        EdgeButton.setEnabled(false);
        NoiseReductionButton.setEnabled(false);
        algorithmchoose.setEnabled(false);
        functionDouble.setEnabled(false);
        finaledge.setEnabled(false);
        multipleDetect.setEnabled(false);
        ImageType.setEnabled(false);
        LogButton.setEnabled(false);
        pso_detect.setEnabled(false);
        pso_button.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jLog = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        LogText = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        LogText2 = new javax.swing.JTextArea();
        pso_log = new javax.swing.JFrame();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        pso_lama = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        pso_baru = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        Original = new javax.swing.JLabel();
        After = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        SingleDetectButton = new javax.swing.JButton();
        CycleSpinner = new javax.swing.JSpinner();
        hmsSpinner = new javax.swing.JSpinner();
        hmcrSpinner = new javax.swing.JSpinner();
        parminSpinner = new javax.swing.JSpinner();
        parmaxSpinner = new javax.swing.JSpinner();
        bwminSpinner = new javax.swing.JSpinner();
        bwmaxSpinner = new javax.swing.JSpinner();
        bwstatic = new javax.swing.JSpinner();
        parstatic = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        multipleDetect = new javax.swing.JButton();
        algorithmchoose = new javax.swing.JComboBox<>();
        circleLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        NoiseReductionButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        combokernel = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        iteration = new javax.swing.JSpinner();
        jPanel5 = new javax.swing.JPanel();
        sliderTreshold = new javax.swing.JSlider();
        EdgeButton = new javax.swing.JButton();
        comborat = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        ComboColor = new javax.swing.JComboBox<>();
        ComboThick = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        panelFx = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textFx = new javax.swing.JTextArea();
        functionCheck = new javax.swing.JCheckBox();
        finaledge = new javax.swing.JCheckBox();
        functionDouble = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        ImageType = new javax.swing.JComboBox<>();
        namaFile = new javax.swing.JTextField();
        LogButton = new javax.swing.JToggleButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        iteration_pso = new javax.swing.JTextField();
        population_pso = new javax.swing.JTextField();
        velocity_pso = new javax.swing.JTextField();
        pso_detect = new javax.swing.JButton();
        pso_button = new javax.swing.JButton();

        LogText.setColumns(20);
        LogText.setRows(5);
        jScrollPane2.setViewportView(LogText);

        LogText2.setColumns(20);
        LogText2.setRows(5);
        jScrollPane4.setViewportView(LogText2);

        javax.swing.GroupLayout jLogLayout = new javax.swing.GroupLayout(jLog.getContentPane());
        jLog.getContentPane().setLayout(jLogLayout);
        jLogLayout.setHorizontalGroup(
            jLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        jLogLayout.setVerticalGroup(
            jLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                .addContainerGap())
        );

        pso_lama.setColumns(20);
        pso_lama.setRows(5);
        jScrollPane3.setViewportView(pso_lama);

        pso_baru.setColumns(20);
        pso_baru.setRows(5);
        jScrollPane5.setViewportView(pso_baru);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 843, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pso_logLayout = new javax.swing.GroupLayout(pso_log.getContentPane());
        pso_log.getContentPane().setLayout(pso_logLayout);
        pso_logLayout.setHorizontalGroup(
            pso_logLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pso_logLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pso_logLayout.setVerticalGroup(
            pso_logLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Elbananda Permana Putri | 09121002029");
        setExtendedState(12);
        setFocusCycleRoot(false);

        jButton1.setText("open file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Original.setBorder(javax.swing.BorderFactory.createTitledBorder("Original Image"));

        After.setBorder(javax.swing.BorderFactory.createTitledBorder("Edge Image / Noise Reduce"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameter Harmony Search Algorithm"));

        jLabel1.setText("Cycle");

        jLabel2.setText("HM Size");

        jLabel3.setText("HMCR");

        jLabel4.setText("PAR min");

        jLabel5.setText("PAR max");

        jLabel6.setText("BW min");

        jLabel7.setText("BW max");

        SingleDetectButton.setText("Single Detect");
        SingleDetectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SingleDetectButtonActionPerformed(evt);
            }
        });

        CycleSpinner.setModel(new javax.swing.SpinnerNumberModel(300, 1, 1000, 1));
        CycleSpinner.setToolTipText("");

        hmsSpinner.setModel(new javax.swing.SpinnerNumberModel(200, 0, 300, 1));

        hmcrSpinner.setModel(new javax.swing.SpinnerNumberModel(0.3d, 0.05d, 0.99d, 0.01d));

        parminSpinner.setModel(new javax.swing.SpinnerNumberModel(0.3d, 0.001d, 0.45d, 0.001d));

        parmaxSpinner.setModel(new javax.swing.SpinnerNumberModel(0.99d, 0.7d, 0.99d, 0.001d));

        bwminSpinner.setModel(new javax.swing.SpinnerNumberModel(4, 1, 4, 1));

        bwmaxSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 4, 10, 1));

        bwstatic.setModel(new javax.swing.SpinnerNumberModel(2.0d, 0.0d, 5.0d, 1.0d));
        bwstatic.setToolTipText("");

        parstatic.setModel(new javax.swing.SpinnerNumberModel(0.3d, 0.1d, 0.99d, 0.001d));

        jLabel11.setText("bw static");

        jLabel12.setText("par static");

        multipleDetect.setText("Multiple Detect");
        multipleDetect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipleDetectActionPerformed(evt);
            }
        });

        algorithmchoose.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "IHS", "HSA" }));
        algorithmchoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmchooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(SingleDetectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multipleDetect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(jLabel1))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jLabel2)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(hmsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel4)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(parminSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(hmcrSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(parmaxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(CycleSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bwstatic, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bwminSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bwmaxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(parstatic, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(algorithmchoose, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CycleSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(hmsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(hmcrSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(parminSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bwminSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bwmaxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(bwstatic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(parstatic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(parmaxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5))
                    .addComponent(algorithmchoose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SingleDetectButton)
                    .addComponent(multipleDetect))
                .addContainerGap())
        );

        circleLabel.setBorder(javax.swing.BorderFactory.createTitledBorder("Circle"));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Set Kernel "));

        NoiseReductionButton.setText("Noise Reduction");
        NoiseReductionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NoiseReductionButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Kernel:");

        combokernel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "null", "3 x 3", "5 x 5", "7 x 7", "9 x 9", "11 x 11" }));

        jLabel14.setText("Iteration:");

        iteration.setModel(new javax.swing.SpinnerNumberModel(1, 0, 10, 1));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(NoiseReductionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combokernel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(iteration)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(NoiseReductionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(combokernel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(iteration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Set Threshold for Edge"));

        sliderTreshold.setMaximum(200);
        sliderTreshold.setToolTipText("");
        sliderTreshold.setValue(100);

        EdgeButton.setText("Edge Detection");
        EdgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EdgeButtonActionPerformed(evt);
            }
        });

        comborat.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25" }));
        comborat.setSelectedIndex(12);

        jLabel13.setText("Ratio:");

        jLabel15.setText("Threshold:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap(13, Short.MAX_VALUE)
                        .addComponent(EdgeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comborat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sliderTreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EdgeButton)
                    .addComponent(jLabel13)
                    .addComponent(comborat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sliderTreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("MCA setting"));

        jLabel9.setText("Choose Circle Color: ");

        ComboColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RED", "BLUE", "GREEN" }));
        ComboColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboColorActionPerformed(evt);
            }
        });

        ComboThick.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5" }));

        jLabel10.setText("Circle Thick             :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ComboColor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ComboThick, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(ComboColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(ComboThick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        panelFx.setBorder(javax.swing.BorderFactory.createTitledBorder("Objective Function"));

        textFx.setEditable(false);
        textFx.setColumns(20);
        textFx.setFont(new java.awt.Font("Consolas", 0, 13)); // NOI18N
        textFx.setRows(5);
        jScrollPane1.setViewportView(textFx);

        functionCheck.setText("View f(x)");
        functionCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionCheckActionPerformed(evt);
            }
        });

        finaledge.setText("View Eliminate Edge");
        finaledge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finaledgeActionPerformed(evt);
            }
        });

        functionDouble.setText("View f(x) for multiple");
        functionDouble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionDoubleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFxLayout = new javax.swing.GroupLayout(panelFx);
        panelFx.setLayout(panelFxLayout);
        panelFxLayout.setHorizontalGroup(
            panelFxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(panelFxLayout.createSequentialGroup()
                        .addComponent(functionCheck)
                        .addGap(10, 10, 10)
                        .addComponent(finaledge)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(functionDouble)
                        .addGap(0, 483, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelFxLayout.setVerticalGroup(
            panelFxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFxLayout.createSequentialGroup()
                .addGroup(panelFxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(functionCheck)
                    .addComponent(finaledge)
                    .addComponent(functionDouble))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Image Type"));

        ImageType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Synthethic Image", "Synthethic Image with noise", "Real Image" }));
        ImageType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImageTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ImageType, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(ImageType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        namaFile.setEditable(false);
        namaFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaFileActionPerformed(evt);
            }
        });

        LogButton.setText("Log Harmony Memory");
        LogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogButtonActionPerformed(evt);
            }
        });

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("PSO parameter"));

        jLabel16.setText("iteration:");

        jLabel17.setText("population: ");

        jLabel18.setText("max velocity:");

        iteration_pso.setText("30");

        population_pso.setText("50");

        velocity_pso.setText("20");

        pso_detect.setText("Detect");
        pso_detect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pso_detectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pso_detect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(velocity_pso, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(population_pso))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(iteration_pso)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(iteration_pso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(population_pso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(velocity_pso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pso_detect))
        );

        pso_button.setText("Log Particle");
        pso_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pso_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(namaFile))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(13, 13, 13)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(LogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(pso_button, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(panelFx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Original, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(After, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(circleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 18, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(namaFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(After, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                    .addComponent(Original, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(circleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LogButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pso_button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelFx, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 11, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        ImageType.setEnabled(true);
         bwstatic.setEnabled(false);
        parstatic.setEnabled(false);
        functionCheck.setEnabled(false);
        combokernel.setEnabled(false);
        SingleDetectButton.setEnabled(false);
        NoiseReductionButton.setEnabled(false);
        algorithmchoose.setEnabled(false);
        functionDouble.setEnabled(false);
        finaledge.setEnabled(false);
        multipleDetect.setEnabled(false);
       LogButton.setEnabled(false);
        After.setIcon(null);
        circleLabel.setIcon(null);
        textFx.setText("");
        pso_button.setEnabled(false);
        pso_detect.setEnabled(false);
        
        multipleCircleFunction=null;
        tempFunction=null;
        
        String name;
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPEG file", "jpg", "jpeg");
        fileChooser.addChoosableFileFilter(filter);
         int returnVal = fileChooser.showOpenDialog(this);
         if (returnVal == JFileChooser.APPROVE_OPTION){
            imageFile = fileChooser.getSelectedFile();
            name=imageFile.getName();
            Image resize = null;
             try {
                originalImage  = ImageIO.read(imageFile);
                 } catch (Exception e){
            }
             ImageIcon image = new ImageIcon(originalImage);             
             namaFile.setText(name);
             Original.setIcon(image);  
             EdgeButton.setEnabled(true);
             old="";
             
    }//GEN-LAST:event_jButton1ActionPerformed

    }    
    private void ComboColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboColorActionPerformed

    private void NoiseReductionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NoiseReductionButtonActionPerformed
        // TODO add your handling code here: 
         if ( originalImage==null) {
            JOptionPane.showMessageDialog(null, "silakan masukan gambar" ,"ERROR ",JOptionPane.ERROR_MESSAGE); 
        }
         String kernel = (String) combokernel.getSelectedItem();
         int iterasi = (int) iteration.getValue();
         
         
         width = originalImage.getWidth();
         height = originalImage.getHeight();
        Controller controller = new Controller();
       
        if (kernel!="null") {
             controller.SetKernel(kernel);       
            int kwidth = controller.getKw();
            int kheight= controller.getKh(); 
            
            controller.MedianFilter(originalImage, iterasi);

            originalImage=controller.getClearImage();
             ImageIcon x= new ImageIcon(originalImage);
             After.setIcon(x);
        }
        else{
        JOptionPane.showMessageDialog(null, "Kernel parameter = null " ,"ERROR ",JOptionPane.ERROR_MESSAGE); 
      
        }
        
         originalImage = null;
            try {
                originalImage  = ImageIO.read(imageFile);
                 } catch (Exception e){
                    }   

    }//GEN-LAST:event_NoiseReductionButtonActionPerformed

    private void EdgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EdgeButtonActionPerformed
        // TODO add your handling code here:
        BufferedImage Edge= null;
        if ( originalImage==null) {
            JOptionPane.showMessageDialog(null, "silahkan masukan gambar" ,"ERROR ",JOptionPane.ERROR_MESSAGE);
        }
        try{
            originalImage = ImageIO.read(imageFile);
        }catch (Exception e){
        }
        String kernel = (String) combokernel.getSelectedItem();
        int iterasi = (int) iteration.getValue();
        int lowT;
        int ratio;
        lowT= sliderTreshold.getValue();
     
        ratio = Integer.parseInt((String) comborat.getSelectedItem());

        width = originalImage.getWidth();
        height = originalImage.getHeight();

        Controller controller = new Controller();
        if (kernel!="null") {
            controller.SetKernel(kernel);       
            int kwidth = controller.getKw();
            int kheight= controller.getKh(); 
            controller.MedianFilter(originalImage, iterasi);
            originalImage=controller.getClearImage();
        }
        controller.setImage(originalImage);
        controller.EdgeDetection1(lowT,ratio);
        Edge = controller.getEdgeImage();

        ImageIcon u = new ImageIcon(Edge);
        After.setIcon(u);
        tempEdge= Edge;
        oldEdge = Edge;
        try {
            originalImage  = ImageIO.read(imageFile);
        } catch (Exception e){
        }
        SingleDetectButton.setEnabled(true);
        algorithmchoose.setEnabled(true);
        multipleDetect.setEnabled(true);
        pso_detect.setEnabled(true);
    }//GEN-LAST:event_EdgeButtonActionPerformed

    private void functionCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionCheckActionPerformed
        // TODO add your handling code here:
       
        if (functionCheck.isSelected()) {
             if ( originalImage==null || tempEdge==null) {
            JOptionPane.showMessageDialog(null, "silahkan masukan gambar" ,"ERROR ",JOptionPane.ERROR_MESSAGE); 
            }
          width = originalImage.getWidth();
          height = originalImage.getHeight();
          BufferedImage Circlex=null;
          String selectColor = (String) ComboColor.getSelectedItem();
          String selectThick = (String) ComboThick.getSelectedItem();

          Controller controller = new Controller();
          controller.setImage(originalImage);
          
          controller.setThickStatic(1);
          controller.DrawCircleWithEdge(tempEdge, bestx0, besty0, bestrad);
          Circlex = controller.getCircleImage();
         
          int sumc= controller.getSum(); //sumc adalah jumlah piksel lingakaran yg bersinggungan dgn garis tepi
          int ns = controller.getNS(); // NS adalah jumlah piksel lingkaran
          float jc = controller.getFitness();
          float percentage= (float)sumc/ns*100;
          float sumcperns= (float)sumc/ns;
          
          ImageIcon x = new ImageIcon(Circlex);
          circleLabel.setIcon(x);
            if (Algo=="IHS"|| Algo=="HSA") {
                textFx.setText(" E(xv,Yv): "+sumc+", Ns:"+ns+" ,J(c):"+jc+
                         "\n x0:"+bestx0+", y0:"+besty0+",radius:"+bestrad+
                         "\n % Lingkaran yg terdeteksi: "+percentage+
                          "%\n SumC/NS =" +sumcperns+
                          "\n waktu komputasi: " +timeSingle/10000+" detik"
                          + "\n Algoritma :"+Algo                  
                            );
            }
            else{
                 textFx.setText(" E(xv,Yv): "+sumc+", Ns:"+ns+" ,f(x):"+jc+
                         "\n x0:"+bestx0+", y0:"+besty0+",radius:"+bestrad+
                         "\n % Lingkaran yg terdeteksi: "+percentage+
                          "%\n SumC/NS =" +sumcperns+
                          "\n waktu komputasi: " +timeSingle/10000+" detik"
                          + "\n Algoritma :"+Algo                  
                            );
                
            }
          
          
          //reset original Image
            originalImage = null;
            try {
                originalImage  = ImageIO.read(imageFile);
                 } catch (Exception e){
                    }     
        }
        else{
            ImageIcon x = new ImageIcon(Circle);
            circleLabel.setIcon(x);
            textFx.setText("");
        
        }
        
    }//GEN-LAST:event_functionCheckActionPerformed

    private void algorithmchooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmchooseActionPerformed
        // TODO add your handling code here:
        if (algorithmchoose.getSelectedIndex()==1) { //hsa
            CycleSpinner.setEnabled(true);
            hmsSpinner.setEnabled(true);
            parminSpinner.setEnabled(false);
            parmaxSpinner.setEnabled(false);
            bwminSpinner.setEnabled(false);
            bwmaxSpinner.setEnabled(false);
            
            bwstatic.setEnabled(true);
            parstatic.setEnabled(true);
            
            
            
            
        }
        
        if (algorithmchoose.getSelectedIndex()==0) { //ihs
            parminSpinner.setEnabled(true);
            parmaxSpinner.setEnabled(true);
            bwminSpinner.setEnabled(true);
            bwmaxSpinner.setEnabled(true);
            
            bwstatic.setEnabled(false);
            parstatic.setEnabled(false);
      
            
            
        }

        
    }//GEN-LAST:event_algorithmchooseActionPerformed

    private void ImageTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImageTypeActionPerformed
        // TODO add your handling code here:
        if (originalImage != null) {
            if ( ImageType.getSelectedIndex()==0) { //sintetis 
            combokernel.setSelectedIndex(0);
            combokernel.setEnabled(false);
            NoiseReductionButton.setEnabled(false);
           
            
            }
        
            if (ImageType.getSelectedIndex()==1 ) { //sintetis with noise
            combokernel.setEnabled(true);
            NoiseReductionButton.setEnabled(true);
            combokernel.setSelectedIndex(1);
            
            }
        
            if (ImageType.getSelectedIndex()==2) { //real pic
            combokernel.setEnabled(true);
            NoiseReductionButton.setEnabled(true);
             combokernel.setSelectedIndex(2);
             multipleDetect.setEnabled(false);
             SingleDetectButton.setEnabled(false);
             sliderTreshold.setValue(180);
            }
        }
        
      
    }//GEN-LAST:event_ImageTypeActionPerformed

    private void namaFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaFileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaFileActionPerformed

    private void SingleDetectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SingleDetectButtonActionPerformed
        // TODO add your handling code here:
        LogButton.setEnabled(true);
        DateFormat jammulai = new SimpleDateFormat("HH:mm:ss.SSS\n");
        Date jam = new Date();
        //System.out.println(jammulai.format(jam));
      
        String algorithm;
        if ( originalImage==null) {
            JOptionPane.showMessageDialog(null, "silakan masukan gambar" ,"ERROR  ",JOptionPane.ERROR_MESSAGE);
        }
        else{
            functionCheck.setEnabled(true);
            finaledge.setEnabled(false);
            boolean multiple= false;
            Algo=algorithm = (String) algorithmchoose.getSelectedItem();

            double parStatic , bwStatic;
            int cycles, memorySize, bwMin, bwMaks;
            double considerationRate, parMin, parMaks;
            cycles = (Integer) CycleSpinner.getValue();
            memorySize = (Integer) hmsSpinner.getValue();
            bwMin = (Integer) bwminSpinner.getValue();
            bwMaks= (Integer) bwmaxSpinner.getValue();

            considerationRate = (Double) hmcrSpinner.getValue();
            parMin = (Double) parminSpinner.getValue();
            parMaks = (Double) parmaxSpinner.getValue();

            parStatic = (Double) parstatic.getValue();
            bwStatic = (Double) bwstatic.getValue();

            String selectColor = (String) ComboColor.getSelectedItem();
            String selectThick = (String) ComboThick.getSelectedItem();

            Parameter param = new Parameter(cycles, memorySize, considerationRate, parMin, parMaks, bwMin, bwMaks);

            Controller  controller = new Controller ();
            controller.setEdge(tempEdge);
            controller.setOriginalImage(originalImage);
            controller.setThick(selectThick);
            controller.setColor(selectColor);
            controller.HarmonySearch(multiple, algorithm, parStatic, bwStatic);
            
            Circle = controller.getCircleImage();

            bestrad= controller.getrad();
            bestx0= controller.getx0();
            besty0= controller.gety0();
            
            ImageIcon x = new ImageIcon(Circle);
            circleLabel.setIcon(x);
            
           controller.toSquareCircleHole(bestx0, besty0, bestrad, originalImage.getWidth(), originalImage.getHeight());
           Solid= controller.getSquarewithHole();
           
         
           hms= memorySize;
           hmbaru = controller.getHMbaru();
           hmlama= controller.getHMlama();
           

        }
        originalImage = null;
        try {
            originalImage  = ImageIO.read(imageFile);
        } catch (Exception e){
        }
        
        DateFormat jamakhir = new SimpleDateFormat("HH:mm:ss.SSS \n");
        Date jam2 = new Date();
        //System.out.println(jamakhir.format(jam2));

        float difference = jam2.getTime() - jam.getTime();
        timeSingle= difference;
       // System.out.println("durasi "+difference*1 +" milisecond"); 
    }//GEN-LAST:event_SingleDetectButtonActionPerformed

    private void multipleDetectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleDetectActionPerformed
        // TODO add your handling code here:
        DateFormat jammulai = new SimpleDateFormat("HH:mm:ss.SSS\n");
        Date jam = new Date();
        //System.out.println(jammulai.format(jam));
       
        boolean multiple= true;
        String algorithm = (String) algorithmchoose.getSelectedItem();
        Algo= algorithm;
        finaledge.setEnabled(true);
        functionCheck.setEnabled(false);
        functionDouble.setEnabled(true);
        double parStatic , bwStatic;
        int cycles, memorySize, bwMin, bwMaks;
        double considerationRate, parMin, parMaks;
        cycles = (Integer) CycleSpinner.getValue();
        memorySize = (Integer) hmsSpinner.getValue();
        bwMin = (Integer) bwminSpinner.getValue();
        bwMaks= (Integer) bwmaxSpinner.getValue();

        considerationRate = (Double) hmcrSpinner.getValue();
        parMin = (Double) parminSpinner.getValue();
        parMaks = (Double) parmaxSpinner.getValue();

        parStatic = (Double) parstatic.getValue();
        bwStatic = (Double) bwstatic.getValue();

        String selectColor = (String) ComboColor.getSelectedItem();
        String selectThick = (String) ComboThick.getSelectedItem();

        Parameter param = new Parameter(cycles, memorySize, considerationRate, parMin, parMaks, bwMin, bwMaks);

        Controller controller = new Controller();
       
        controller.setThick(selectThick);
        controller.setColor(selectColor);
       
        
        controller.setEdge(tempEdge);
        controller.setOriginalImage(originalImage);
        controller.MultipleDetection(multiple, algorithm, parStatic, bwStatic);
        MultipleCircle= controller.getMultipleCircle();
        FinalEdge = controller.getFinalEdge();
        
        ImageIcon x = new ImageIcon(MultipleCircle);
        circleLabel.setIcon(x);
        tempEdge=FinalEdge;
 
       //batas =======================================================================
      
        
        if (tempFunction==null) {
              tempFunction  = oldEdge;
        }
        
        
        controller.setImage(originalImage);
        bestx0=controller.getx0();
        besty0=controller.gety0();
        bestrad=controller.getrad();
        System.out.print(bestx0+","+besty0+","+bestrad);
        controller.setThickStatic(1);   
        controller.DrawCircleWithEdge(tempFunction, bestx0, besty0, bestrad);
        multipleCircleFunction = controller.getCircleImage();
        
       
        
        int sumc= controller.getSum(); //sumc adalah jumlah piksel lingakaran yg bersinggungan dgn garis tepi
        int ns = controller.getNS(); // NS adalah jumlah piksel lingkaran
        float jc = controller.getFitness();
        float percentage= (float)sumc/ns*100;
        float sumcperns= (float)sumc/ns;
          
        circleLabel.setIcon(x);
        DateFormat jamakhir = new SimpleDateFormat("HH:mm:ss.SSS \n");
        Date jam2 = new Date();
        //System.out.println(jamakhir.format(jam2));

        float difference = jam2.getTime() - jam.getTime();
        timeSingle= difference;
       // System.out.println("durasi "+difference*1 +" milisecond"); 
        
        old= (old+ "E(xv,Yv): "+sumc+", Ns:"+ns+" ,J(c):"+jc+
                         "\n x0:"+bestx0+", y0:"+besty0+",radius:"+bestrad+
                         "\n % Lingkaran yg terdeteksi: "+percentage+
                          "%\n SumC/NS =" +sumcperns+
                          "\n waktu komputasi: " +timeSingle/1000+" detik"
                          + "\n Algoritma :"+Algo                  
                            +"\n=========================================\n");
        
        tempFunction= multipleCircleFunction;
        
    }//GEN-LAST:event_multipleDetectActionPerformed

    private void finaledgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finaledgeActionPerformed
        // TODO add your handling code here:
        if (finaledge.isSelected()) {
            ImageIcon x = new ImageIcon(FinalEdge);
            circleLabel.setIcon(x);
        }
        else{
             ImageIcon x = new ImageIcon(MultipleCircle);
            circleLabel.setIcon(x);
        }
        
    }//GEN-LAST:event_finaledgeActionPerformed

    private void functionDoubleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionDoubleActionPerformed
        // TODO add your handling code here:
        
         if (functionDouble.isSelected()) {
             if ( originalImage==null || tempEdge==null) {
            JOptionPane.showMessageDialog(null, "silahkan masukan gambar" ,"ERROR ",JOptionPane.ERROR_MESSAGE); 
            }
          width = originalImage.getWidth();
          height = originalImage.getHeight();
        
          String selectColor = (String) ComboColor.getSelectedItem();
          String selectThick = (String) ComboThick.getSelectedItem();
         
          ImageIcon x = new ImageIcon(  multipleCircleFunction );
          circleLabel.setIcon(x);
          textFx.setText(old);   
        }
        else{
            ImageIcon x = new ImageIcon(MultipleCircle);
            circleLabel.setIcon(x);
            textFx.setText("");
        
        }
   
    }//GEN-LAST:event_functionDoubleActionPerformed

    private void LogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogButtonActionPerformed
        // TODO add your handling code here:   
        if(LogButton.isSelected())
        {
            if (hmlama==null && hmbaru==null) {
                LogText.setText("");
                LogText2.setText("");
            }
            
            else{
                jLog.setLocationRelativeTo(After);
                jLog.setResizable(true);
                jLog.setSize(500, 500);
                jLog.setVisible(true);

                LogText.setSize(200, 200);
                LogText2.setSize(200,200);

                String HMlamatext="Harmony Memory lama\n";
                for (int i = 0; i < hms; i++) {
                    HMlamatext = HMlamatext+""+hmlama[i]+"";
                    LogText.setText(HMlamatext);
                }

                String HMbarutext="Harmony Memory baru\n";
                for (int i = 0; i < hms; i++) {
                    HMbarutext = HMbarutext+""+hmbaru[i]+"";
                    LogText2.setText(HMbarutext);
                }
            }
            
            if (jLog.isVisible()) LogButton.setSelected(true);
                 else jLog.dispose();
                jLog.addComponentListener(new ComponentAdapter(){
                @Override
                public void componentHidden(ComponentEvent e) 
                {
                    LogButton.setSelected(false);
                }
            });
                
                
        }
        else{
            LogButton.setSelected(true);
        }
        
       
        
    }//GEN-LAST:event_LogButtonActionPerformed

    private void pso_detectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pso_detectActionPerformed
        // TODO add your handling code here:
        functionCheck.setEnabled(true);
       DateFormat jammulai = new SimpleDateFormat("HH:mm:ss.SSS\n");
        Date jam = new Date();

       int Iteration, Vmax, Population;
        int x=0;
        int y=0;
        int r=0;
        population=Population =  Integer.parseInt(population_pso.getText());        
        Iteration  =  Integer.parseInt(iteration_pso.getText());      
        Vmax       = Integer.parseInt(velocity_pso.getText());
        String selectColor = (String) ComboColor.getSelectedItem();
        Algo="PSO";
       Parameter_PSO param = new Parameter_PSO(Iteration, Vmax, Population);
       Controller  controller = new Controller();
       controller.PSO(tempEdge,population);
       x=controller.getx0();
       y=controller.gety0();
       r=controller.getrad();
       System.out.print("Hasil Final x="+x+",y="+y+",r="+r);
       Circle =controller.DrawCircle(3, selectColor, x, y, r, originalImage, originalImage.getWidth(), originalImage.getHeight());
       

        DateFormat jamakhir = new SimpleDateFormat("HH:mm:ss.SSS \n");
        Date jam2 = new Date();
        //System.out.println(jamakhir.format(jam2));

       float difference = jam2.getTime() - jam.getTime();
       timeSingle= difference;
       bestx0  = x;
       besty0  = y;
       bestrad = r;
       
       Plama = controller.getOldP();
       Pbaru = controller.getNewP();
       
        ImageIcon circle = new ImageIcon(Circle);
            circleLabel.setIcon(circle);
            
        originalImage = null;
        try {
            originalImage  = ImageIO.read(imageFile);
        } catch (Exception e){
        }
        
        pso_button.setEnabled(true);
    }//GEN-LAST:event_pso_detectActionPerformed

    private void pso_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pso_buttonActionPerformed
        // TODO add your handling code here:
       
        if(pso_button.isSelected())
        {
            if (Plama==null && Pbaru==null) {
                pso_lama.setText(" ksoong ");
                pso_baru.setText(" kosong ");
            }
            
            else{
                pso_log.setLocationRelativeTo(After);
                pso_log.setResizable(true);
                pso_log.setSize(900, 960);
                pso_log.setVisible(true);

                pso_lama.setSize(500,500);
                pso_baru.setSize(500,500);

                String Plamatext="Partikel lama\n";
                for (int i = 0; i < population; i++) {
                    Plamatext = Plamatext+""+Plama[i]+"";
                    pso_lama.setText(Plamatext);
                }

                String Pbarutext="Partikel baru\n";
                for (int i = 0; i < population; i++) {
                    Pbarutext = Pbarutext+""+Pbaru[i]+"";
                    pso_baru.setText(Pbarutext);
                }
            }
            
            if (pso_log.isVisible()) pso_button.setSelected(true);
                 else pso_log.dispose();
                pso_log.addComponentListener(new ComponentAdapter(){
                @Override
                public void componentHidden(ComponentEvent e) 
                {
                    pso_button.setSelected(false);
                }
            });
                
                
        }
        else{
            pso_button.setSelected(true);
        }
        
       
    }//GEN-LAST:event_pso_buttonActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel After;
    private javax.swing.JComboBox<String> ComboColor;
    private javax.swing.JComboBox<String> ComboThick;
    private javax.swing.JSpinner CycleSpinner;
    private javax.swing.JButton EdgeButton;
    private javax.swing.JComboBox<String> ImageType;
    private javax.swing.JToggleButton LogButton;
    private javax.swing.JTextArea LogText;
    private javax.swing.JTextArea LogText2;
    private javax.swing.JButton NoiseReductionButton;
    private javax.swing.JLabel Original;
    private javax.swing.JButton SingleDetectButton;
    private javax.swing.JComboBox<String> algorithmchoose;
    private javax.swing.JSpinner bwmaxSpinner;
    private javax.swing.JSpinner bwminSpinner;
    private javax.swing.JSpinner bwstatic;
    private javax.swing.JLabel circleLabel;
    private javax.swing.JComboBox<String> combokernel;
    private javax.swing.JComboBox<String> comborat;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JCheckBox finaledge;
    private javax.swing.JCheckBox functionCheck;
    private javax.swing.JCheckBox functionDouble;
    private javax.swing.JSpinner hmcrSpinner;
    private javax.swing.JSpinner hmsSpinner;
    private javax.swing.JSpinner iteration;
    private javax.swing.JTextField iteration_pso;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JFrame jLog;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton multipleDetect;
    private javax.swing.JTextField namaFile;
    private javax.swing.JPanel panelFx;
    private javax.swing.JSpinner parmaxSpinner;
    private javax.swing.JSpinner parminSpinner;
    private javax.swing.JSpinner parstatic;
    private javax.swing.JTextField population_pso;
    private javax.swing.JTextArea pso_baru;
    private javax.swing.JButton pso_button;
    private javax.swing.JButton pso_detect;
    private javax.swing.JTextArea pso_lama;
    private javax.swing.JFrame pso_log;
    private javax.swing.JSlider sliderTreshold;
    private javax.swing.JTextArea textFx;
    private javax.swing.JTextField velocity_pso;
    // End of variables declaration//GEN-END:variables

}

